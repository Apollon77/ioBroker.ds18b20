"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const SYSTEMD_SERVICE_NAME = 'iobroker-ds18b20-remote.service';
const files = {
    'common.js': 'InVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwpleHBvcnRzLmRlY3J5cHQgPSBleHBvcnRzLmVuY3J5cHQgPSBleHBvcnRzLlJFTU9URV9QUk9UT0NPTF9WRVJTSU9OID0gdm9pZCAwOwpjb25zdCBjcnlwdG8gPSByZXF1aXJlKCJjcnlwdG8iKTsKZXhwb3J0cy5SRU1PVEVfUFJPVE9DT0xfVkVSU0lPTiA9IDE7CmNvbnN0IElWX0xFTkdUSCA9IDE2OwpmdW5jdGlvbiBlbmNyeXB0KHRleHQsIGtleSkgewogICAgY29uc3QgaXYgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoSVZfTEVOR1RIKTsKICAgIGNvbnN0IGNpcGhlciA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdignYWVzLTI1Ni1jYmMnLCBrZXksIGl2KTsKICAgIGxldCBlbmNyeXB0ZWQgPSBjaXBoZXIudXBkYXRlKHRleHQpOwogICAgZW5jcnlwdGVkID0gQnVmZmVyLmNvbmNhdChbZW5jcnlwdGVkLCBjaXBoZXIuZmluYWwoKV0pOwogICAgcmV0dXJuIGl2LnRvU3RyaW5nKCdoZXgnKSArICc6JyArIGVuY3J5cHRlZC50b1N0cmluZygnaGV4Jyk7Cn0KZXhwb3J0cy5lbmNyeXB0ID0gZW5jcnlwdDsKZnVuY3Rpb24gZGVjcnlwdCh0ZXh0LCBrZXkpIHsKICAgIGNvbnN0IHRleHRQYXJ0cyA9IHRleHQuc3BsaXQoJzonKTsKICAgIGNvbnN0IGl2ID0gQnVmZmVyLmZyb20odGV4dFBhcnRzLnNoaWZ0KCksICdoZXgnKTsKICAgIGNvbnN0IGVuY3J5cHRlZFRleHQgPSBCdWZmZXIuZnJvbSh0ZXh0UGFydHMuam9pbignOicpLCAnaGV4Jyk7CiAgICBjb25zdCBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KCdhZXMtMjU2LWNiYycsIGtleSwgaXYpOwogICAgbGV0IGRlY3J5cHRlZCA9IGRlY2lwaGVyLnVwZGF0ZShlbmNyeXB0ZWRUZXh0KTsKICAgIGRlY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQoW2RlY3J5cHRlZCwgZGVjaXBoZXIuZmluYWwoKV0pOwogICAgcmV0dXJuIGRlY3J5cHRlZC50b1N0cmluZygpOwp9CmV4cG9ydHMuZGVjcnlwdCA9IGRlY3J5cHQ7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXA=',
'ds18b20-remote-client.js': '',
'logger.js': 'InVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwpleHBvcnRzLkxvZ2dlciA9IHZvaWQgMDsKY2xhc3MgTG9nZ2VyIHsKICAgIGxvZyguLi5hcmdzKSB7CiAgICAgICAgY29uc29sZS5sb2coLi4uYXJncyk7CiAgICB9CiAgICBkZWJ1ZyguLi5hcmdzKSB7CiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5ERUJVRykgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnNvbGUubG9nKCdbRGVidWddJywgLi4uYXJncyk7CiAgICB9CiAgICBpbmZvKC4uLmFyZ3MpIHsKICAgICAgICBjb25zb2xlLmxvZygnW0luZm9dJywgLi4uYXJncyk7CiAgICB9CiAgICB3YXJuKC4uLmFyZ3MpIHsKICAgICAgICBjb25zb2xlLndhcm4oJ1tXYXJuXScsIC4uLmFyZ3MpOwogICAgfQogICAgZXJyb3IoLi4uYXJncykgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tFcnJvcl0nLCAuLi5hcmdzKTsKICAgIH0KfQpleHBvcnRzLkxvZ2dlciA9IExvZ2dlcjsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcA=='
};
for (const f in files) {
    const content = Buffer.from(files[f], 'base64').toString('utf-8');
    fs.writeFileSync(f, content, { encoding: 'utf-8' });
}
const systemDContent = `[Unit]
Description=ioBroker.ds18b20 remote client
Documentation=https://github.com/crycode-de/ioBroker.ds18b20
After=network.target

[Service]
Type=simple
User=${os.userInfo().username}
WorkingDirectory=${__dirname}
ExecStart=${process.execPath} ${path.join(__dirname, 'ds18b20-remote-client.js')}
Restart=on-failure

[Install]
WantedBy=multi-user.target
`;
const systemDFile = path.join(__dirname, SYSTEMD_SERVICE_NAME);
fs.writeFileSync(systemDFile, systemDContent, { encoding: 'utf-8' });
const dotEnvContent = `# Settings for the ioBroker.ds18b20 remote client

# Unique ID for this remote system
SYSTEM_ID=my-remote

# IP or hostname of the ioBroker host running the adapter
ADAPTER_HOST=

# Port from the adapter config
ADAPTER_PORT=1820

# Encryption key from the adapter config
ADAPTER_KEY=

# Enable debug log output
#DEBUG=1

# System path of the 1-wire devices
#W1_DEVICES_PATH=/sys/bus/w1/devices
`;
const dotEnvFile = path.join(__dirname, '.env');
if (!fs.existsSync(dotEnvFile)) {
    fs.writeFileSync(dotEnvFile, dotEnvContent, { encoding: 'utf-8' });
}
console.log(`- ioBroker.ds18b20 remote client -

Basic setup done.

Please adjust the settings in the .env file.

To manually start the client just run:
  node ds18b20-remote-client.js

To setup the SystemD service, please run:
  sudo cp ${SYSTEMD_SERVICE_NAME} /etc/systemd/system/${SYSTEMD_SERVICE_NAME}
  sudo systemctl daemon-reload
  sudo systemctl enable ${SYSTEMD_SERVICE_NAME}
  sudo systemctl start ${SYSTEMD_SERVICE_NAME}
`);
//# sourceMappingURL=setup.js.map
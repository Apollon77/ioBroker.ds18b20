{"version":3,"file":"ds18b20-remote.js","sourceRoot":"/","sources":["ds18b20-remote.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ioBroker-ds18b20-remote\n *\n * Remote client for the ioBroker.ds18b20 adapter.\n * This client has zero dependencies and can be started on any linux os running\n * Node.js.\n *\n * The client will connect to the ioBroker adapter using a TCP socket and\n * provide an interface to let the adapter read 1-wire sensors connected to the\n * client system.\n *\n * MIT License\n *\n * Copyright (c) 2021 Peter MÃ¼ller <peter@crycode.de> (https://crycode.de)\n */\n\nimport { promisify } from 'util';\nimport { Socket } from 'net';\nimport * as fs from 'fs';\nimport * as os from 'os';\n\nconst readDir = promisify(fs.readdir);\nconst readFile = promisify(fs.readFile);\n\nimport { Logger } from './logger';\n\nimport {\n  encrypt,\n  decrypt,\n} from './common/crypt';\n\nimport { RemoteData } from './common/types';\n\n/**\n * Keys to read from a .env file into process.env\n */\nconst ENV_KEYS = [\n  'ADAPTER_HOST',\n  'ADAPTER_KEY',\n  'ADAPTER_PORT',\n  'DEBUG',\n  'SYSTEM_ID',\n  'W1_DEVICES_PATH',\n];\n\n/**\n * Main class for ioBroker-ds18b20-remote\n */\nclass Ds18b20Remote {\n\n  /**\n   * Host where the adapter runs on.\n   */\n  private readonly adapterHost: string;\n\n  /**\n   * Port on which the adapter is listening for remote connections.\n   * Default is `1820`.\n   */\n  private readonly adapterPort: number;\n\n  /**\n   * Encryption key used to encrypt/decrypt the communication with the adapter.\n   */\n  private readonly adapterKey: Buffer;\n\n  /**\n   * ID of this remote system.\n   * This should be unique. Defaults to the system hostname.\n   */\n  private readonly systemId: string;\n\n  /**\n   * System path to the 1-wire devices. Default is `/sys/bus/w1/devices`.\n   */\n  private readonly w1DevicesPath: string;\n\n  /**\n   * The socket used to communicate with the adapter.\n   */\n  private socket: Socket;\n\n  /**\n   * Timeout to trigger socket reconnects.\n   */\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n\n  /**\n   * Flag if ds18b20-remote should exit.\n   * If `true` a reconnect won't be possible.\n   */\n  private shouldExit: boolean = false;\n\n  /**\n   * String of the received data.\n   * All received data chunks will be appended to this until we got `\\n`.\n   * On `\\n` data before it will be processed.\n   */\n  private recvData: string = '';\n\n  /**\n   * Our simple logger.\n   */\n  private readonly log: Logger;\n\n  constructor () {\n    // bind methods\n    this.connect = this.connect.bind(this);\n    this.exit = this.exit.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.onData = this.onData.bind(this);\n    this.onError = this.onError.bind(this);\n\n    this.log = new Logger();\n    this.log.log('ioBroker-ds18b20-remote');\n\n    // read env vars from a .env file in cwd\n    this.readDotEnv();\n\n    // get the system ID\n    if (process.env.SYSTEM_ID) {\n      this.systemId = process.env.SYSTEM_ID.trim();\n    } else {\n      this.systemId = os.hostname();\n      this.log.warn(`Using the hostname ${this.systemId} as system ID. Please set SYSTEM_ID to a unique value.`);\n    }\n    this.log.debug(`systemId`, this.systemId);\n\n    // get adapter port\n    if (process.env.ADAPTER_PORT) {\n      try {\n        this.adapterPort = parseInt(process.env.ADAPTER_PORT, 10);\n      } catch (err) {\n        this.log.error(`Invalid ADAPTER_PORT!`, err);\n        process.exit(1);\n      }\n    } else {\n      this.adapterPort = 1820;\n    }\n    this.log.debug(`adapterPort`, this.adapterPort);\n\n    // get adapter host\n    this.adapterHost = (process.env.ADAPTER_HOST || '').trim();\n    if (this.adapterHost.length <= 0) {\n      this.log.error(`No ADAPTER_HOST given!`);\n      process.exit(1);\n    }\n    this.log.debug(`adapterHost`, this.adapterHost);\n\n    // get the encryption key\n    this.adapterKey = Buffer.from(process.env.ADAPTER_KEY || '', 'hex');\n    if (this.adapterKey.length !== 32) {\n      this.log.error(`ADAPTER_KEY is no valid key!`);\n      process.exit(1);\n    }\n    this.log.debug(`adapterKey`, this.adapterKey);\n\n    // get the 1-wire devices path\n    this.w1DevicesPath = process.env.W1_DEVICES_PATH || '/sys/bus/w1/devices';\n    if (!fs.existsSync(this.w1DevicesPath)) {\n      this.log.error(`The 1-wire devices path ${this.w1DevicesPath} does not exist!`);\n      process.exit(1);\n    }\n    this.log.debug(`w1DevicesPath`, this.w1DevicesPath);\n\n    // register signal handlers for exit\n    process.on('SIGINT', this.exit);\n    process.on('SIGTERM', this.exit);\n\n    // create the socket\n    this.socket = new Socket();\n\n    this.socket.on('close', this.onClose);\n    this.socket.on('data', this.onData);\n    this.socket.on('error', this.onError);\n\n    // try to connect\n    this.connect();\n  }\n\n  /**\n   * Try to connect to the adapter.\n   */\n  private connect (): void {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n\n    // don't connect if we should exit\n    if (this.shouldExit) {\n      return;\n    }\n\n    this.log.info(`Connecting to ${this.adapterHost}:${this.adapterPort} ...`)\n\n    this.socket.connect({\n      host: this.adapterHost,\n      port: this.adapterPort,\n    }, () => {\n      this.log.info(`Connected with adapter`);\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n      }\n      this.reconnectTimeout = null;\n    });\n  }\n\n  /**\n   * Handle incoming data chunks.\n   * @param data A data chunk.\n   */\n  private onData (data: Buffer): void {\n    this.recvData += data.toString();\n\n    // check for \\n and process the data\n    const idx = this.recvData.indexOf('\\n');\n    if (idx > 0) {\n      const raw = this.recvData.slice(0, idx);\n      this.recvData = this.recvData.slice(idx + 1);\n      this.handleSocketData(raw);\n    }\n  }\n\n  /**\n   * Handle a message from the adapter.\n   * @param raw The raw (encoded) message from the adapter.\n   */\n  private async handleSocketData (raw: string): Promise<void> {\n    // try to decrypt and parse the data\n    let data: RemoteData;\n    try {\n      const dataStr = decrypt(raw, this.adapterKey);\n      data = JSON.parse(dataStr);\n    } catch (err) {\n      this.log.warn(`Decrypt of data failed! ${err.toString()}`);\n      // close the socket\n      this.socket.end();\n      return;\n    }\n\n    this.log.debug('message from adapter:', data);\n\n    switch (data.cmd) {\n      case 'clientInfo':\n        // get client info\n        this.log.info('Sending client info to the adapter')\n        this.send({\n          cmd: 'clientInfo',\n          systemId: this.systemId,\n        });\n        break;\n\n      case 'read':\n        // read sensor data\n        if (!data.address) {\n          this.log.warn(`Got read command without address from adapter!`);\n          return;\n        }\n\n        let raw: string;\n        try {\n          raw = await readFile(`${this.w1DevicesPath}/${data.address}/w1_slave`, 'utf8');\n          this.log.debug(`Read from file ${this.w1DevicesPath}/${data.address}/w1_slave:`, raw);\n        } catch (err) {\n          this.log.warn(`Read from file ${this.w1DevicesPath}/${data.address}/w1_slave failed! ${err.toString()}`);\n          this.log.debug(err);\n          raw = '';\n        }\n\n        await this.send({\n          cmd: 'read',\n          address: data.address,\n          ts: data.ts,\n          raw,\n        });\n        break;\n\n      case 'search':\n        // search for sensors\n        try {\n          const files = await readDir(this.w1DevicesPath);\n\n          const proms: Promise<string>[] = [];\n          for (let i = 0; i < files.length; i++) {\n            if (!files[ i ].match(/^w1_bus_master\\d+$/)) {\n              continue;\n            }\n            this.log.debug(`reading ${this.w1DevicesPath}/${files[ i ]}/w1_master_slaves`);\n            proms.push(readFile(`${this.w1DevicesPath}/${files[ i ]}/w1_master_slaves`, 'utf8'));\n          }\n\n          const addresses: string[] = (await Promise.all(proms)).reduce<string[]>((acc, cur) => {\n            acc.push(...cur.trim().split('\\n'));\n            return acc;\n          }, []);\n\n          await this.send({\n            cmd: 'search',\n            ts: data.ts,\n            systemId: data.systemId,\n            addresses\n          });\n\n        } catch (err) {\n          this.log.warn(`Searching for sensors failed! ${err.toString()}`);\n          this.log.debug(err);\n        }\n\n        break;\n\n      default:\n        this.log.warn(`Unknown command from adapter`);\n    }\n  }\n\n  /**\n   * Handler for socket errors.\n   * Each error will trigger a socket disconnect and reconnect.\n   * @param err The error.\n   */\n  private onError (err: Error): void {\n    this.log.warn(`Socket error:`, err.toString());\n    this.log.debug(err);\n\n    // close the socket on an error\n    this.socket.end();\n\n    this.reconnect();\n  }\n\n  /**\n   * Handler for socket close events.\n   */\n  private onClose (): void {\n    this.log.info('Socket closed');\n    this.reconnect();\n  }\n\n  /**\n   * Init a reconnect after 30 seconds.\n   */\n  private reconnect (): void {\n    if (!this.reconnectTimeout && !this.shouldExit) {\n      // schedule reconnect\n      this.log.info(`Reconnect in 30 seconds`);\n      this.reconnectTimeout = setTimeout(this.connect, 30000);\n    }\n  }\n\n  /**\n   * Send some data to the adapter.\n   * The data will be stringified and encrypted before sending.\n   * @param data The data object to send.\n   */\n  private async send (data: RemoteData): Promise<void> {\n    this.log.debug('send to adapter:', data);\n    return new Promise<void>((resolve, reject) => {\n      this.socket.write(encrypt(JSON.stringify(data), this.adapterKey) + '\\n', (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    })\n  }\n\n  /**\n   * Read env vars from a .env file in the current working dir if exists.\n   */\n  private readDotEnv (): void {\n    if (!fs.existsSync('.env')) return;\n\n    let data: string[];\n    try {\n      data = fs.readFileSync('.env', 'utf-8').split('\\n').map((l) => l.trim());\n    } catch (err) {\n      this.log.debug('can\\'t read .env file', err);\n      return;\n    }\n\n    for (const line of data) {\n      if (!line || line.startsWith('#')) continue;\n\n      const idx = line.indexOf('=');\n      if (idx <= 0) continue;\n\n      const key = line.slice(0, idx).trim();\n      const val = line.slice(idx + 1).trim().replace(/(^\"|\"$)/g, '');\n\n      if (ENV_KEYS.indexOf(key) >= 0) {\n        // ignore if this env is already set\n        if (process.env[key]) continue;\n\n        // set this env\n        process.env[key] = val;\n        this.log.debug(`read ${key}=${val} from .env file`);\n      }\n    }\n  }\n\n  /**\n   * Handler process exit.\n   * This will stop all timeouts and close the socket connection.\n   */\n  private exit (): void {\n    this.shouldExit = true;\n\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n    }\n\n    this.socket.end();\n  }\n}\n\n// create an instance of the main class for startup\nnew Ds18b20Remote();\n"]}
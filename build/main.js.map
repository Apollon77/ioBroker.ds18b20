{"version":3,"file":"main.js","sourceRoot":"/","sources":["main.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;;;;;;;;;;;;;;;AAEH,+BAAiC;AAEjC,yBAAyB;AACzB,MAAM,QAAQ,GAAG,gBAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAExC,gDAAgD;AAEhD,qDAA2C;AAE3C,qCAAkC;AAYlC;;GAEG;AACH,MAAM,cAAe,SAAQ,KAAK,CAAC,OAAO;IAOxC;;;OAGG;IACH,YAAmB,UAAyC,EAAE;QAC5D,KAAK,iCACA,OAAO,KACV,IAAI,EAAE,SAAS,IACf,CAAC;QAbL;;WAEG;QACK,YAAO,GAA2B,EAAE,CAAC;QAY3C,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3C,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACnC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IAEW,OAAO;;YACnB,gDAAgD;YAChD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAE9C,+BAA+B;YAC/B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAEzD,0CAA0C;YAC1C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;gBAC9B,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,qBAAqB,CAAC;aACnD;YAED,gBAAgB;YAChB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,GAAG,YAAY,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;gBAC9E,IAAI,GAAG,EAAE;oBACP,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;oBACrD,OAAO;iBACR;gBAED,KAAK,MAAM,QAAQ,IAAI,OAAO,EAAE;oBAC9B,MAAM,GAAG,GAAiB,OAAO,CAAC,QAAQ,CAAiB,CAAC;oBAE5D,MAAM,QAAQ,GAAG,OAAO,GAAG,CAAC,MAAM,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;oBAC7G,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,eAAM,CAAC;wBACjC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa;wBACxC,EAAE,EAAE,GAAG,CAAC,GAAG;wBACX,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO;wBAC3B,QAAQ;wBACR,WAAW,EAAE,GAAG,CAAC,MAAM,CAAC,WAAW;wBACnC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM;wBACzB,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM;wBACzB,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ;qBAC9B,CAAC,CAAC;oBACH,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAC1D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAC1D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,mBAAmB,EAAE,IAAI,CAAC,6BAA6B,CAAC,CAAC;iBACnF;gBAED,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,UAAU,CAAC,CAAC;YACvE,CAAC,CAAC,CAAC;YAEH,0BAA0B;YAC1B,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC;KAAA;IAED;;OAEG;IAEW,QAAQ,CAAC,QAAoB;;YACzC,IAAI;gBACF,sCAAsC;gBACtC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAClC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;iBAC9B;gBAED,yBAAyB;gBACzB,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;aAE/C;YAAC,OAAM,CAAC,EAAE,GAAG;YAEd,QAAQ,EAAE,CAAC;QACb,CAAC;KAAA;IAED;;;;OAIG;IAEK,iBAAiB,CAAE,KAAoB,EAAE,EAAU;QACzD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;YAAE,OAAO;QAE9B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,KAAK,gBAAgB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7E,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE;YACrB,GAAG,EAAE,IAAI;YACT,GAAG,EAAE,KAAK;SACX,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IAEK,iBAAiB,CAAE,GAAU,EAAE,EAAU;QAC/C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,wBAAwB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,GAAG,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;;OAMG;IAEK,6BAA6B,CAAE,QAAiB,EAAE,EAAU;QAClE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,yBAAyB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,eAAe,QAAQ,EAAE,CAAC,CAAC;QAE3F,+BAA+B;QAC/B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;gBAC7B,kEAAkE;gBAClE,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC9C,OAAO;aACR;SACF;QACD,mDAAmD;QACnD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACK,SAAS,CAAE,WAAmB;QACpC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;YAAE,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAEhE,gBAAgB;QAChB,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,WAAW,EAAE;gBAC5C,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACzB;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACK,OAAO,CAAE,WAAoB;QACnC,IAAI,OAAO,WAAW,KAAK,QAAQ,IAAI,WAAW,KAAK,KAAK,IAAI,WAAW,KAAK,EAAE,EAAE;YAClF,mBAAmB;YACnB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAChD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;aAC3B;SAEF;aAAM;YACL,yBAAyB;YACzB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAEzC,IAAI,CAAC,IAAI,EAAE;gBACT,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,gCAAgC,WAAW,SAAS,CAAC,CAAC;gBACpE,OAAO;aACR;YAED,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAyB,IAAI,CAAC,OAAO,MAAM,CAAC,CAAC;YAC3D,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;IACH,CAAC;IAED;;;;OAIG;IAEW,aAAa,CAAC,EAAU,EAAE,KAAwC;;YAC9E,IAAI,KAAK,EAAE;gBACT,wBAAwB;gBACxB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,aAAa,KAAK,CAAC,GAAG,WAAW,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBAElG,kCAAkC;gBAClC,IAAI,KAAK,CAAC,GAAG,KAAK,IAAI;oBAAE,OAAO;gBAE/B,wBAAwB;gBACxB,QAAQ,EAAE,EAAE;oBACV,KAAK,IAAI,CAAC,SAAS,GAAG,kBAAkB;wBACtC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAa,CAAC,CAAC;wBAClC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,GAAG,kBAAkB,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;wBAClE,MAAM;iBACT;aAEF;iBAAM;gBACL,wBAAwB;gBACxB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;aACvC;QACH,CAAC;KAAA;IAED;;;OAGG;IAEK,SAAS,CAAC,GAAqB;QACrC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAErD,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,OAAO,EAAE;YAC1C,QAAQ,GAAG,CAAC,OAAO,EAAE;gBACnB,KAAK,SAAS;oBACZ,gCAAgC;oBAChC,IAAI,OAAO,GAAG,CAAC,OAAO,KAAK,QAAQ,EAAE;wBACnC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;qBAC3B;yBAAM;wBACL,IAAI,CAAC,OAAO,EAAE,CAAC;qBAChB;oBACD,MAAM;gBACR,KAAK,MAAM;oBACT,gBAAgB;oBAChB,IAAI,OAAO,GAAG,CAAC,OAAO,KAAK,QAAQ,EAAE;wBACnC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;wBACzC,IAAI,CAAC,IAAI,EAAE;4BACT,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;4BACjC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,gBAAgB,EAAG,KAAK,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;yBAClG;wBACD,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;4BACvB,IAAI,GAAG,EAAE;gCACP,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;gCAC/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAG,KAAK,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;6BACzF;iCAAM;gCACL,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAG,KAAK,EAAE,KAAK,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;6BAChF;wBACH,CAAC,CAAC,CAAC;qBACJ;yBAAM;wBACL,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;wBACzC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,+BAA+B,EAAG,KAAK,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;qBACjH;oBACD,MAAM;gBACR,KAAK,QAAQ;oBACX,qBAAqB;oBACrB,+CAA+C;oBAC/C,IAAI,CAAC,GAAG,CAAC,QAAQ;wBAAE,OAAO;oBAE1B,QAAQ,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,kCAAkC,EAAE,MAAM,CAAC;yBAC7E,IAAI,CAAC,CAAC,IAAY,EAAE,EAAE;wBACrB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;wBACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAC7F,CAAC,CAAC;yBACD,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;wBACpB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACzF,CAAC,CAAC,CAAC;oBACL,MAAM;aACT;SACF;IACH,CAAC;CAEF;AAnPC;IADC,0BAAQ;6CA4CR;AAMD;IADC,0BAAQ;8CAcR;AAQD;IADC,0BAAQ;uDAUR;AAQD;IADC,0BAAQ;uDAGR;AAUD;IADC,0BAAQ;mEAcR;AAoDD;IADC,0BAAQ;mDAqBR;AAOD;IADC,0BAAQ;+CAmDR;AAIH,IAAI,MAAM,CAAC,MAAM,EAAE;IACjB,yCAAyC;IACzC,MAAM,CAAC,OAAO,GAAG,CAAC,OAAkD,EAAE,EAAE,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;CACtG;KAAM;IACL,wCAAwC;IACxC,CAAC,GAAG,EAAE,CAAC,IAAI,cAAc,EAAE,CAAC,EAAE,CAAC;CAChC","sourcesContent":["/**\n * ioBroker DS18B20 1-wire temperature sensor adapter.\n *\n * (C) 2019 Peter MÃ¼ller <peter@crycode.de> (https://github.com/crycode-de/ioBroker.ds18b20)\n */\n\nimport { promisify } from 'util';\n\nimport * as fs from 'fs';\nconst readFile = promisify(fs.readFile);\n\nimport * as utils from '@iobroker/adapter-core';\n\nimport { autobind } from 'core-decorators';\n\nimport { Sensor } from './sensor';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace ioBroker {\n    interface AdapterConfig {\n      defaultInterval: number;\n      w1DevicesPath: string;\n    }\n  }\n}\n\n/**\n * The ds18b20 adapter.\n */\nclass Ds18b20Adapter extends utils.Adapter {\n\n  /**\n   * Mapping of the ioBroker object IDs to the sensor class instances.\n   */\n  private sensors: Record<string, Sensor> = {};\n\n  /**\n   * Constructor to create a new instance of the adapter.\n   * @param options The adapter options.\n   */\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: 'ds18b20',\n    });\n\n    this.on('ready', this.onReady);\n    this.on('stateChange', this.onStateChange);\n    this.on('message', this.onMessage);\n    this.on('unload', this.onUnload);\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  @autobind\n  private async onReady(): Promise<void> {\n    // Reset the connection indicator during startup\n    this.setState('info.connection', false, true);\n\n    // Debug log the current config\n    this.log.debug('config: ' + JSON.stringify(this.config));\n\n    // set default devices path if not defined\n    if (!this.config.w1DevicesPath) {\n      this.config.w1DevicesPath = '/sys/bus/w1/devices';\n    }\n\n    // setup sensors\n    this.getForeignObjects(this.namespace + '.sensors.*', 'state', (err, objects) => {\n      if (err) {\n        this.log.error('error loading sensors data objects');\n        return;\n      }\n\n      for (const objectId in objects) {\n        const obj: SensorObject = objects[objectId] as SensorObject;\n\n        const interval = typeof obj.native.interval === 'number' ? obj.native.interval : this.config.defaultInterval;\n        this.sensors[obj._id] = new Sensor({\n          w1DevicesPath: this.config.w1DevicesPath,\n          id: obj._id,\n          address: obj.native.address,\n          interval,\n          nullOnError: obj.native.nullOnError,\n          factor: obj.native.factor,\n          offset: obj.native.offset,\n          decimals: obj.native.decimals\n        });\n        this.sensors[obj._id].on('value', this.handleSensorValue);\n        this.sensors[obj._id].on('error', this.handleSensorError);\n        this.sensors[obj._id].on('errorStateChanged', this.handleSensorErrorStateChanged);\n      }\n\n      this.log.debug(`loaded ${Object.keys(this.sensors).length} sensors`);\n    });\n\n    // subscribe needed states\n    this.subscribeStates('actions.*');\n  }\n\n  /**\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\n   */\n  @autobind\n  private async onUnload(callback: () => void): Promise<void> {\n    try {\n      // stop all intervals from the sensors\n      for (const address in this.sensors) {\n        this.sensors[address].stop();\n      }\n\n      // reset connection state\n      this.setState('info.connection', false, true);\n\n    } catch(e) { }\n\n    callback();\n  }\n\n  /**\n   * Handler for incoming sensor values.\n   * @param value The value.\n   * @param id    The ioBroker ID of the sensor.\n   */\n  @autobind\n  private handleSensorValue (value: number | null, id: string): void {\n    if (!this.sensors[id]) return;\n\n    this.log.debug(`got value ${value} from sensor ${this.sensors[id].address}`);\n\n    this.setStateAsync(id, {\n      ack: true,\n      val: value\n    });\n  }\n\n  /**\n   * Handler for sensor errors.\n   * @param err The error.\n   * @param id  The ioBroker ID of the sensor.\n   */\n  @autobind\n  private handleSensorError (err: Error, id: string): void {\n    this.log.warn(`Error reading sensor ${this.sensors[id].address}: ${err}`);\n  }\n\n  /**\n   * Handler for changes of error state of a sensor.\n   * This will change the info.connection state of the adapter to true if all\n   * sensors are ok and false if at least one sensor has an error.\n   * @param hasError Indecator if the sensor has an error or not.\n   * @param id       The ioBroker ID of the sensor.\n   */\n  @autobind\n  private handleSensorErrorStateChanged (hasError: boolean, id: string): void {\n    this.log.debug(`error state of sensor ${this.sensors[id].address} changed to ${hasError}`);\n\n    // check all sensors for errors\n    for (const id in this.sensors) {\n      if (this.sensors[id].hasError) {\n        // at least one sensor has an error, set connection state to false\n        this.setState('info.connection', false, true);\n        return;\n      }\n    }\n    // all sensors are ok, set connection state to true\n    this.setState('info.connection', true, true);\n  }\n\n  /**\n   * Get a defined sensor from it's ioBroker ID or 1-wire address.\n   * @param  idOrAddress The ID or address of the sensor.\n   * @return             The sensor or null.\n   */\n  private getSensor (idOrAddress: string): Sensor | null {\n    if (this.sensors[idOrAddress]) return this.sensors[idOrAddress];\n\n    // check address\n    for (const id in this.sensors) {\n      if (this.sensors[id].address === idOrAddress) {\n        return this.sensors[id];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Trigger the reading of a single sensor or all sensors.\n   * @param idOrAddress The ioBroker ID or 1-wire address of the sensor. Use `all` or an empty string to read all sensors.\n   */\n  private readNow (idOrAddress?: string): void {\n    if (typeof idOrAddress !== 'string' || idOrAddress === 'all' || idOrAddress === '') {\n      // read all sensors\n      this.log.info(`Read data from all sensors now`);\n      for (const addr in this.sensors) {\n        this.sensors[addr].read();\n      }\n\n    } else {\n      // read a specific sensor\n      const sens = this.getSensor(idOrAddress);\n\n      if (!sens) {\n        this.log.warn(`No sensor with address or id ${idOrAddress} found!`);\n        return;\n      }\n\n      this.log.info(`Read data from sensor ${sens.address} now`);\n      sens.read();\n    }\n  }\n\n  /**\n   * Is called if a subscribed state changes.\n   * @param id    The ID of the state.\n   * @param state The ioBroker state.\n   */\n  @autobind\n  private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n    if (state) {\n      // The state was changed\n      this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack}) ` + JSON.stringify(state));\n\n      // don't do anything if ack is set\n      if (state.ack === true) return;\n\n      // handle special states\n      switch (id) {\n        case this.namespace + '.actions.readNow':\n          this.readNow(state.val as string);\n          this.setStateAsync(this.namespace + '.actions.readNow', '', true);\n          break;\n      }\n\n    } else {\n      // The state was deleted\n      this.log.debug(`state ${id} deleted`);\n    }\n  }\n\n  /**\n   * Some message was sent to this instance over message box (e.g. by a script).\n   * @param obj The receied ioBroker message.\n   */\n  @autobind\n  private onMessage(obj: ioBroker.Message): void {\n    this.log.debug('got message ' + JSON.stringify(obj));\n\n    if (typeof obj === 'object' && obj.message) {\n      switch (obj.command) {\n        case 'readNow':\n          // we should read sensors now...\n          if (typeof obj.message === 'string') {\n            this.readNow(obj.message);\n          } else {\n            this.readNow();\n          }\n          break;\n        case 'read':\n          // read a sensor\n          if (typeof obj.message === 'string') {\n            const sens = this.getSensor(obj.message);\n            if (!sens) {\n              this.log.debug('no such sensor');\n              return this.sendTo(obj.from, obj.command, { err: 'No such sensor' , value: null }, obj.callback);\n            }\n            sens.read((err, value) => {\n              if (err) {\n                this.log.debug(err.toString());\n                this.sendTo(obj.from, obj.command, { err: err.toString() , value: null }, obj.callback);\n              } else {\n                this.sendTo(obj.from, obj.command, { err: null , value: value }, obj.callback);\n              }\n            });\n          } else {\n            this.log.debug('no address or id given');\n            return this.sendTo(obj.from, obj.command, { err: 'No sensor address or id given' , value: null }, obj.callback);\n          }\n          break;\n        case 'search':\n          // search for sensors\n          // don't do anything if no callback is provided\n          if (!obj.callback) return;\n\n          readFile(`${this.config.w1DevicesPath}/w1_bus_master1/w1_master_slaves`, 'utf8')\n            .then((data: string) => {\n              data = data.trim();\n              this.sendTo(obj.from, obj.command, { err: null, sensors: data.split('\\n') }, obj.callback);\n            })\n            .catch((err: Error) => {\n              this.sendTo(obj.from, obj.command, { err: err.toString(), sensors: [] }, obj.callback);\n            });\n          break;\n      }\n    }\n  }\n\n}\n\nif (module.parent) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Ds18b20Adapter(options);\n} else {\n  // otherwise start the instance directly\n  (() => new Ds18b20Adapter())();\n}\n"]}
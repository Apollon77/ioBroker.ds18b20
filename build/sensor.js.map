{"version":3,"file":"sensor.js","sourceRoot":"/","sources":["sensor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n *  Class for a DS18B20 temperature sensor.\n */\n\nimport { EventEmitter } from 'events';\nimport { promisify } from 'util';\n\nimport * as fs from 'fs';\nconst readFile = promisify(fs.readFile);\n\nimport { autobind } from 'core-decorators';\n\nimport { round } from './lib/tools';\nimport { Ds18b20Adapter } from './main';\n\n/**\n * Options for a Sensor.\n */\ninterface SensorOptions {\n  w1DevicesPath: string;\n  id: string;\n  address: string;\n  interval: number;\n  nullOnError: boolean;\n  factor: number;\n  offset: number;\n  decimals: number | null;\n\n  remoteSystemId: string | null;\n}\n\n/**\n * Interface to declare events for the Sensor class.\n */\nexport interface Sensor {\n  on (event: 'value', listener: (value: number | null, id: string) => void): this;\n  on (event: 'error', listener: (err: Error, id: string) => void): this;\n  on (event: 'errorStateChanged', listener: (hasError: boolean, id: string) => void): this;\n\n  emit (event: 'value', value: number | null, id: string): boolean;\n  emit (event: 'error', err: Error, id: string): boolean;\n  emit (event: 'errorStateChanged', hasError: boolean, id: string): boolean;\n}\n\n/**\n * This class represents a single sensor.\n */\nexport class Sensor extends EventEmitter {\n  /**\n   * The ID of the sensor in ioBroker.\n   */\n  public readonly id: string;\n\n  /**\n   * The address (1-wire ID) of the sensor.\n   */\n  public readonly address: string;\n\n  /**\n   * Use null values on errors.\n   */\n  public readonly nullOnError: boolean;\n\n  /**\n   * Factor for value calculation.\n   */\n  public readonly factor: number;\n\n  /**\n   * Offset for value calculation.\n   */\n  public readonly offset: number;\n\n  /**\n   * Number of decimals to round to.\n   */\n  public readonly decimals: number | null;\n\n  /**\n   * SystemID of the client with this sensor if this is a remote sensor.\n   * `null` for local sensors.\n   */\n  public readonly remoteSystemId: string | null;\n\n  /**\n   * Flag if the last read of the sensor had an error.\n   */\n  public hasError: boolean;\n\n  /**\n   * Timer for interval sensor readings.\n   */\n  private timer: number | null = null;\n\n  /**\n   * System path where the 1-wire devices can be read.\n   */\n  private readonly w1DevicesPath: string;\n\n  /**\n   * Reference to the adapter class.\n   */\n  private readonly adapter: Ds18b20Adapter;\n\n  /**\n   * Constructor for a new sensor.\n   * @param opts The options for the Sensor.\n   */\n  constructor (opts: SensorOptions, adapter: Ds18b20Adapter) {\n    super();\n    this.adapter = adapter;\n\n    this.id = opts.id;\n    this.address = opts.address.replace(/[^0-9a-f-]/g, ''); // remove all bad chars!\n    this.nullOnError = opts.nullOnError;\n    this.factor = opts.factor;\n    this.offset = opts.offset;\n    this.decimals = opts.decimals;\n    this.hasError = true; // true on init while we don't know the current state\n    this.w1DevicesPath = opts.w1DevicesPath;\n    this.remoteSystemId = opts.remoteSystemId;\n\n    // start interval and initial read if interval is set\n    if (opts.interval && opts.interval > 0) {\n      // smallest interval is 500ms\n      if (opts.interval < 500) {\n        opts.interval = 500;\n      }\n      this.timer = setInterval(this.read, opts.interval);\n      this.read();\n    }\n  }\n\n  /**\n   * Read the temperature.\n   * The value and possible errors will be emitted as events.\n   * Optionally a callback may be used.\n   * @param  cb Optional callback function.\n   */\n  @autobind\n  public async read (cb?: (err: Error | null, val: number | null) => void): Promise<void> {\n\n    try {\n      let raw: string;\n\n      if (this.remoteSystemId) {\n        // remote sensor - send request\n        if (!this.adapter.remoteSensorServer) {\n          throw new Error('Remote sensors not enabled');\n        }\n        raw = await this.adapter.remoteSensorServer.read(this.remoteSystemId, this.address);\n      } else {\n        // local sensor - read the file\n        raw = await readFile(`${this.w1DevicesPath}/${this.address}/w1_slave`, 'utf8');\n      }\n\n      this.processData(raw, cb);\n\n    } catch (err) {\n      this.emit('error', err, this.id);\n      if (typeof cb === 'function') {\n        cb(err, null);\n      }\n    }\n  }\n\n  /**\n   * Process the raw data from a sensor file.\n   * @param rawData The raw data read from the sensor file.\n   * @param cb Optional callback function.\n   */\n  public async processData (rawData: string, cb?: (err: Error | null, val: number | null) => void): Promise<void> {\n    const lines = rawData.split('\\n');\n\n    let val: number | null = null;\n    let err: Error | null = null;\n\n    try {\n      if (lines[0].indexOf('YES') > -1) {\n        // checksum ok\n        const bytes = lines[0].split(' ');\n        if (bytes[0] === bytes[1] && bytes[0] === bytes[2] && bytes[0] === bytes[3] && bytes[0] === bytes[4] && bytes[0] === bytes[5] && bytes[0] === bytes[6] && bytes[0] === bytes[7] && bytes[0] === bytes[8]) {\n          // all bytes are the same\n          throw new Error('Communication error');\n        }\n\n        const m = lines[1].match(/t=(-?\\d+)/);\n        if (!m) {\n          throw new Error('Parse error');\n        }\n        val = parseInt(m[1], 10) / 1000;\n\n      } else if (lines[0].indexOf('NO') > -1) {\n        // checksum error\n        throw new Error('Checksum error');\n\n      } else {\n        // read error\n        throw new Error('Read error');\n      }\n\n      // check for specific errors\n      if (val === 85) {\n        throw new Error('No temperature read');\n      } else if (val === -127) {\n        throw new Error('Device disconnected');\n      } else if (val < -80 || val > 150) {\n        // From datasheet: Measures Temperatures from -55°C to +125°C\n        throw new Error('Read temperature is out of possible range');\n      }\n\n    } catch (e) {\n      this.emit('error', e, this.id);\n      err = e;\n      val = null;\n    }\n\n    // evaluate the result\n    if (val !== null) {\n      val = val * this.factor + this.offset;\n      if (this.decimals !== null) {\n        val = round(val, this.decimals);\n      }\n    }\n\n    if (val !== null || this.nullOnError) {\n      this.emit('value', val, this.id);\n    }\n\n    if (this.hasError !== (val === null)) {\n      this.hasError = (val === null);\n      this.emit('errorStateChanged', this.hasError, this.id);\n    }\n\n    if (typeof cb === 'function') {\n      cb(err, val);\n    }\n  }\n\n  /**\n   * Stop a running interval for automated readings.\n   */\n  public stop (): void {\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n}\n"]}